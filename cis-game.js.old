BasicGame.Game = function (game) {

	//	When a State is added to Phaser it automatically has the following properties set on it, even if they already exist:
    
    this.game;		//	a reference to the currently running game
    this.add;		//	used to add sprites, text, groups, etc
    this.camera;	//	a reference to the game camera
    this.cache;		//	the game cache
    this.input;		//	the global input manager (you can access this.input.keyboard, this.input.mouse, as well from it)
    this.load;		//	for preloading assets
    this.math;		//	lots of useful common math operations
    this.sound;		//	the sound manager - add a sound, play one, set-up markers, etc
    this.stage;		//	the game stage
    this.time;		//	the clock
    this.tweens;	//	the tween manager
    this.world;		//	the game world
    this.particles;	//	the particle manager
    this.physics;	//	the physics manager
    this.rnd;		//	the repeatable random number generator

    //	You can use any of these from any function within this State.
    //	But do consider them as being 'reserved words', i.e. don't create a property for your own game called "world" or you'll over-write the world reference.

        
    this.player;
    this.cursors;

    this.stars;
    this.ships;
    this.shipList = {};
    this.score = 0;
    this.scoreText;


    this.nextFire;
    this.fireRate = 400;
    this.impulse = 20; // How hard each chicken pushes back pushes
    this.chickenImpulse = 80; // How hard each the ship pushes on the chickens
    this.turretLength = 50;
    this.gravitationalConstant = 1000;
    this.scaleFactor = .01;
    this.gameOver = false;

    this.gravitate = function() {
        stars.forEachAlive(function(member) {
          stars.forEachAlive(function(other) {
            if (member != other)
            {
               var distance = Math.sqrt(Math.pow(member.body.x - other.body.x,2) + Math.pow(member.body.y-other.body.y,2))
               var xaccel = this.gravitationalConstant * other.body.mass / Math.pow(distance,3) * (other.body.x - member.body.x);
               var yaccel = this.gravitationalConstant * other.body.mass / Math.pow(distance,3) * (other.body.y - member.body.y);
               member.body.velocity.x += xaccel;
               member.body.velocity.y += yaccel;
            }
          })
        })
    }

    this.explode = function(object1, object2) {
        console.log('Explode')
        object1.kill();
        object2.kill();
        console.log('Boom!');
        // TODO add explosion graphics
    }

    destroyPlayer = function (object1, object2) {
        console.log('Destroy Player')
        object1.kill();
        object2.kill();
        console.log('GameOver!');
        gameOver = true;
        $.ajax({
            type: 'DELETE',
            contentType: 'application/json',
            url: 'http://localhost:3000/ship/'+this.clientId,
            })
        // TODO add explosion graphics
    }

    this.coalesce = function (star, other) {
      // Remove other star
        if (star != other) {
          star.body.velocity.x = (star.body.mass * star.body.velocity.x + other.body.mass * other.body.velocity.x) / (star.body.mass + other.body.mass)
          star.body.velocity.y = (star.body.mass * star.body.velocity.y + other.body.mass * other.body.velocity.y) / (star.body.mass + other.body.mass)
          star.body.mass = star.body.mass + other.body.mass
    //      star.body.setSize(10*Math.sqrt(star.body.mass), 10*Math.sqrt(star.body.mass));
    //      star.body.width=10*Math.sqrt(star.body.mass)
    //      star.body.height=10*Math.sqrt(star.body.mass);
          star.scale.set(this.scaleFactor * Math.sqrt(star.body.mass),Math.sqrt(star.body.mass) * this.scaleFactor);
          console.log('Coalesce');
          other.kill();
          this.score += 10;
//          scoreText.text = 'Collision: ' + score;
        }
    }

    function collectStar (player, star) {
        // Removes the star from the screen
        console.log('Collect stars');
        star.kill();

        //  Add and update the score
        score += 10;
//        scoreText.text = 'Score: ' + score;

    }

this.firenoparams = function() {
   var xcoord =  player.body.x+player.width/2-Math.cos(player.rotation+Math.PI/2)*this.turretLength;
   var ycoord = player.body.y+player.height/2-Math.sin(player.rotation+Math.PI/2)*this.turretLength;
   var xvel = player.body.velocity.x  - Math.cos(player.rotation+Math.PI/2) * this.chickenImpulse;
   var yvel = player.body.velocity.y - Math.sin(player.rotation+Math.PI/2) * this.chickenImpulse;
   player.body.velocity.x += Math.cos(player.rotation+Math.PI/2) * this.impulse;
   player.body.velocity.y += Math.sin(player.rotation+Math.PI/2) * this.impulse;
   this.fire(xcoord, ycoord, xvel, yvel)
}

this.fire = function(xcoord, ycoord, xvel, yvel) {
    if (this.game.time.now > this.nextFire && !this.gameOver) {
     /*   socket.emit('fire', {
           "xcoord" : xcoord, 
           "ycoord": ycoord,
           "xvel" : xvel,
           "yvel" : yvel
           });
           */

        nextFire = this.game.time.now + this.fireRate;
        var star = stars.create(xcoord, ycoord, 'chicken');

       //star.body.setSize(10*Math.sqrt(star.body.mass), 10*Math.sqrt(star.body.mass))
//       star.anchor.setTo(0.5, 0.5)
//       star.body.width = 10*Math.sqrt(star.body.mass);
 //      star.body.height = 10*Math.sqrt(star.body.mass);
        star.body.moves = false;
        console.log(xvel);
        star.body.velocity.x = xvel; 
        star.body.velocity.y = yvel;
        star.scale.setTo(this.scaleFactor * Math.sqrt(star.body.mass), this.scaleFactor * Math.sqrt(star.body.mass))
        star.body.bounce.y = 0.9;
        star.body.bounce.x = 0.9;
        star.body.collideWorldBounds = true;
    }
}

};

BasicGame.Game.prototype = {


    preload: function() {
        this.game.load.script('jquery', 'js/jquery.min.js');
        this.game.load.image('galaxy', 'assets/galaxy.jpg');
        this.game.load.image('sky', 'assets/sky.png');
        this.game.load.image('star', 'assets/star.png');
        this.game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
        this.game.load.image('chicken', 'assets/chicken.png', 24, 48);
        this.game.load.image('rocket', 'assets/rocket.png');

    },

	create: function() {
    //  We're going to be using physics, so enable the Arcade Physics system
    this.game.physics.startSystem(Phaser.Physics.ARCADE);

    //  A simple background for our game
    this.game.add.sprite(0, 0, 'galaxy');

    // The player and its settings
    player = this.game.add.sprite(this.game.world.width/2, this.game.world.height /2, 'rocket');
    player.scale.set(.05, .05);
    player.anchor.setTo(0.5, 0.5)

    //  We need to enable physics on the player
    this.game.physics.arcade.enable(player);

    //  Player physics properties. Give the little guy a slight bounce.
    player.body.bounce.y = .9;
    player.body.bounce.x = .9;
    player.body.gravity.y = 0;
    player.body.collideWorldBounds = true;

    //  Our two animations, walking left and right.
//    player.animations.add('left', [0, 1, 2, 3], 10, true);
//    player.animations.add('right', [5, 6, 7, 8], 10, true);

    //  Finally some stars to collect
    stars = this.game.add.group();
    this.ships = this.game.add.group();

    //  We will enable physics for any star that is created in this group
    stars.enableBody = true;
    this.ships.enableBody = true;

    var star = stars.create(70, 10, 'chicken');
    star.body.moves = false;
    star.body.velocity.x = 2; 
    star.body.velocity.y = 4;
    star.scale.setTo(this.scaleFactor * Math.sqrt(star.body.mass), this.scaleFactor * Math.sqrt(star.body.mass))
    star.body.bounce.y = 0.9;
    star.body.bounce.x = 0.9;
    star.body.collideWorldBounds = true;

    //  The score
//    scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });

    //  Our controls.
    this.cursors = this.game.input.keyboard.createCursorKeys();

    this.nextFire = this.game.time.now;

    // Create a sync event that repeats every 2 seconds
//    game.time.events.loop(Phaser.Timer.SECOND * 4, sync, this);    
//    sync();

	},

	update: function () {
    //this.game.physics.arcade.overlap(this.stars, this.stars, this.coalesce, null, this);
    this.game.physics.arcade.overlap(this.ships, stars, this.explode, null, this);
    this.game.physics.arcade.overlap(this.ships, this.player, this.explode, null, this);

    //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function
    this.game.physics.arcade.overlap(this.player, stars, this.destroyPlayer, null, this);

    // This should be enabled automatically by physics but for some reason, it isn't.
    // This code however causes everything to die upon click
//    this.stars.forEachAlive(function(member) {
//        member.body.reset(member.body.x + member.body.velocity.x, member.body.y + member.body.velocity.y);
        //member.body.x += member.body.velocity.x;
        //member.body.y += member.body.velocity.y;
//    })
    

    player.rotation = this.game.physics.arcade.angleToPointer(player) + Math.PI/2;

    if (this.game.input.activePointer.isDown)
    {
        //  Boom!
        this.firenoparams();
    }

    if (this.game.input.activePointer.isUp)
    {
        if (this.nextFire > this.game.time.now) {
            this.nextFire = this.game.time.now;
        }
    }

    if (this.cursors.left.isDown)
    {
        //  Move to the left
        player.body.velocity.x -= impulse;

//        player.animations.play('left');
    }
    else if (this.cursors.right.isDown)
    {
        //  Move to the right
        player.body.velocity.x += impulse;

//        player.animations.play('right');
    }
    else
    {
        //  Stand still
//        player.animations.stop();

        player.frame = 4;
    }
    
    if (this.cursors.up.isDown) 
    {
        player.body.velocity.y -= impulse;
    } else if (this.cursors.down.isDown) {
        player.body.velocity.y += impulse;
    } else {
       // player.body.velocity.y = 0;
    }
    //this.gravitate();

	},


	quitGame: function (pointer) {

		//	Here you should destroy anything you no longer need.
		//	Stop music, delete sprites, purge caches, free resources, all that good stuff.

		//	Then let's go back to the main menu.
		this.state.start('MainMenu');

	}

};
